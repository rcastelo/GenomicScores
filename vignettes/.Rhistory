---
title: "Genomic Scores"
author:
- name: "Robert Castelo"
affiliation:
- Pompeu Fabra University, Barcelona, Spain
email: robert.castelo@upf.edu
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicScores")
library(GenomicScores)
rl <- Rle(c(1,1,0,0,0,0,0,0,0,0,3,3,3,3,3,2,2))
rl
as.numeric(rl)
require(phastCons100way.UCSC.hg19)
require(GenomicRanges)
gsco <- phastCons100way.UCSC.hg19
gsco
scores(gsco, GRanges(seqnames="chr7", IRanges(start=117232380, width=1)))
availableGScores()
gsco <- getGScores("phastCons100way.UCSC.hg19")
scores(gsco, GRanges(seqnames="chr7", IRanges(start=117232380, width=1)))
origpcscoCDS <- readRDS("origphastCons100wayhg19CDS.rds")
origpcscoCDS
length(unique(origpcscoCDS$score))
numDecimals <- function(x) {
spl <- strsplit(as.character(x+1), "\\.")
spl <- sapply(spl, "[", 2)
spl[is.na(spl)] <- ""
nchar(spl)
}
nd1 <- numDecimals(origpcscoCDS$score)
table(nd1)
origpcsco3UTRs <- readRDS("origphastCons100wayhg193UTR.rds")
origpcsco3UTRs
length(table(origpcsco3UTRs$score))
nd2 <- numDecimals(origpcsco3UTRs$score)
table(nd2)
origpcsco3UTRs <- readRDS("origphastCons100wayhg193UTR.rds")
origpcscoCDS <- readRDS("origphastCons100wayhg19CDS.rds")
pkgpcsco3UTRs <- scores(gsco, origpcsco3UTRs)
pkgpcscoCDS <- scores(gsco, origpcscoCDS)
par(mfrow=c(2, 2))
plot(origpcscoCDS$score, jitter(pkgpcscoCDS), pch=19, cex=1,
xaxt="n", yaxt="n", xlab="Original phastCons scores (CDS)",
ylab="Compressed phastCons scores (CDS)")
axis(1, at=seq(0, 1, by=0.1), labels=seq(0, 1, by=0.1), las=1)
axis(2, at=seq(0, 1, by=0.1), labels=seq(0, 1, by=0.1), las=1)
abline(h=seq(0, 1, by=0.1), v=seq(0, 1, by=0.1), lty=3, col="gray")
abline(0, 1)
plot(origpcsco3UTRs$score, jitter(pkgpcsco3UTRs), pch=19, cex=1,
xaxt="n", yaxt="n", xlab="Original phastCons scores (3' UTR)",
ylab="Compressed phastCons scores (3' UTR)")
axis(1, at=seq(0, 1, by=0.1), labels=seq(0, 1, by=0.1), las=1)
axis(2, at=seq(0, 1, by=0.1), labels=seq(0, 1, by=0.1), las=1)
abline(h=seq(0, 1, by=0.1), v=seq(0, 1, by=0.1), lty=3, col="gray")
abline(0, 1)
ForigCDS <- ecdf(origpcscoCDS$score)
FpkgCDS <- ecdf(pkgpcscoCDS)
plot(sort(origpcscoCDS$score), ForigCDS(sort(origpcscoCDS$score)), xaxt="n", yaxt="n",
pch=".", cex=4, xlab="phastCons scores (CDS)", ylab="F(x)", ylim=c(0, 1))
axis(1, at=seq(0, 1, by=0.1), labels=seq(0, 1, by=0.1), las=1)
axis(2, at=seq(0, 1, by=0.1), labels=seq(0, 1, by=0.1), las=1)
abline(h=seq(0, 1, by=0.1), v=seq(0, 1, by=0.1), lty=3, col="gray")
points(sort(pkgpcscoCDS), FpkgCDS(sort(pkgpcscoCDS)), pch=19, cex=1)
legend("topleft", c("Original score", "Compressed score"), pch=c(46, 19),
pt.cex=c(4, 1), inset=0.01, bg="white")
Forig3UTRs <- ecdf(origpcsco3UTRs$score)
Fpkg3UTRs <- ecdf(pkgpcsco3UTRs)
plot(sort(origpcsco3UTRs$score), Forig3UTRs(sort(origpcsco3UTRs$score)), xaxt="n", yaxt="n",
pch=".", cex=4, xlab="phastCons scores (3'UTR)", ylab="F(x)", ylim=c(0, 1))
axis(1, at=seq(0, 1, by=0.1), labels=seq(0, 1, by=0.1), las=1)
axis(2, at=seq(0, 1, by=0.1), labels=seq(0, 1, by=0.1), las=1)
abline(h=seq(0, 1, by=0.1), v=seq(0, 1, by=0.1), lty=3, col="gray")
points(sort(pkgpcsco3UTRs), Fpkg3UTRs(sort(pkgpcsco3UTRs)), pch=19, cex=1)
legend("topleft", c("Original score", "Compressed score"), pch=c(46, 19),
pt.cex=c(4, 1), inset=0.01, bg="white")
origpcsco3UTRs <- readRDS("origphastCons100wayhg193UTR.rds")
origpcscoCDS <- readRDS("origphastCons100wayhg19CDS.rds")
pkgpcsco3UTRs <- scores(gsco, origpcsco3UTRs)
pkgpcscoCDS <- scores(gsco, origpcscoCDS)
par(mfrow=c(2, 2))
plot(origpcscoCDS$score, jitter(pkgpcscoCDS), pch=19, cex=1,
xaxt="n", yaxt="n", xlab="Original phastCons scores (CDS)",
ylab="Compressed phastCons scores (CDS)")
axis(1, at=seq(0, 1, by=0.1), labels=seq(0, 1, by=0.1), las=1)
axis(2, at=seq(0, 1, by=0.1), labels=seq(0, 1, by=0.1), las=1)
abline(h=seq(0, 1, by=0.1), v=seq(0, 1, by=0.1), lty=3, col="gray")
abline(0, 1)
plot(origpcsco3UTRs$score, jitter(pkgpcsco3UTRs), pch=19, cex=1,
xaxt="n", yaxt="n", xlab="Original phastCons scores (3' UTR)",
ylab="Compressed phastCons scores (3' UTR)")
axis(1, at=seq(0, 1, by=0.1), labels=seq(0, 1, by=0.1), las=1)
axis(2, at=seq(0, 1, by=0.1), labels=seq(0, 1, by=0.1), las=1)
abline(h=seq(0, 1, by=0.1), v=seq(0, 1, by=0.1), lty=3, col="gray")
abline(0, 1)
ForigCDS <- ecdf(origpcscoCDS$score)
FpkgCDS <- ecdf(pkgpcscoCDS)
plot(sort(origpcscoCDS$score), ForigCDS(sort(origpcscoCDS$score)), xaxt="n", yaxt="n",
pch=".", cex=4, xlab="phastCons scores (CDS)", ylab="F(x)", ylim=c(0, 1))
axis(1, at=seq(0, 1, by=0.1), labels=seq(0, 1, by=0.1), las=1)
axis(2, at=seq(0, 1, by=0.1), labels=seq(0, 1, by=0.1), las=1)
abline(h=seq(0, 1, by=0.1), v=seq(0, 1, by=0.1), lty=3, col="gray")
points(sort(pkgpcscoCDS), FpkgCDS(sort(pkgpcscoCDS)), pch=19, cex=1)
legend("topleft", c("Original score", "Compressed score"), pch=c(46, 19),
pt.cex=c(4, 1), inset=0.01, bg="white")
Forig3UTRs <- ecdf(origpcsco3UTRs$score)
Fpkg3UTRs <- ecdf(pkgpcsco3UTRs)
plot(sort(origpcsco3UTRs$score), Forig3UTRs(sort(origpcsco3UTRs$score)), xaxt="n", yaxt="n",
pch=".", cex=4, xlab="phastCons scores (3'UTR)", ylab="F(x)", ylim=c(0, 1))
axis(1, at=seq(0, 1, by=0.1), labels=seq(0, 1, by=0.1), las=1)
axis(2, at=seq(0, 1, by=0.1), labels=seq(0, 1, by=0.1), las=1)
abline(h=seq(0, 1, by=0.1), v=seq(0, 1, by=0.1), lty=3, col="gray")
points(sort(pkgpcsco3UTRs), Fpkg3UTRs(sort(pkgpcsco3UTRs)), pch=19, cex=1)
legend("topleft", c("Original score", "Compressed score"), pch=c(46, 19),
pt.cex=c(4, 1), inset=0.01, bg="white")
origphastCons100wayhg38CDS <- readRDS("origphastCons100wayhg38CDS.rds")
origphastCons100wayhg383UTR <- readRDS("origphastCons100wayhg383UTR.rds")
origphastCons7wayhg38CDS <- readRDS("origphastCons7wayhg38CDS.rds")
origphastCons7wayhg383UTR <- readRDS("origphastCons7wayhg383UTR.rds")
length(origphastCons100wayhg38CDS)
length(origphastCons7wayhg38CDS)
length(origphastCons100wayhg383UTR)
length(origphastCons7wayhg383UTR)
## Overlap between the two CDS files
hits_cds <- findOverlaps(origphastCons100wayhg38CDS, origphastCons7wayhg38CDS)
if (sum(queryHits(hits_cds)==subjectHits(hits_cds))!=length(hits_cds)){
origphastCons100wayhg38CDS <- origphastCons100wayhg38CDS[queryHits(hits_cds)]
origphastCons7wayhg38CDS <- origphastCons7wayhg38CDS[subjectHits(hits_cds)]
}
## Overlap between the two 3'UTR files
hits_3utr <- findOverlaps(origphastCons100wayhg383UTR, origphastCons7wayhg383UTR)
if (sum(queryHits(hits_3utr)==subjectHits(hits_3utr))!=length(hits_3utr)) {
origphastCons100wayhg383UTR <- origphastCons100wayhg383UTR[queryHits(hits_3utr)]
origphastCons7wayhg383UTR <- origphastCons7wayhg383UTR[subjectHits(hits_3utr)]
}
length(origphastCons100wayhg38CDS)
length(origphastCons7wayhg38CDS)
length(origphastCons100wayhg383UTR)
length(origphastCons7wayhg383UTR)
getwd()
setwd("/home/pau/github/GenomicScores/vignettes/")
origphastCons100wayhg38CDS <- readRDS("origphastCons100wayhg38CDS.rds")
origphastCons100wayhg383UTR <- readRDS("origphastCons100wayhg383UTR.rds")
origphastCons7wayhg38CDS <- readRDS("origphastCons7wayhg38CDS.rds")
origphastCons7wayhg383UTR <- readRDS("origphastCons7wayhg383UTR.rds")
length(origphastCons100wayhg38CDS)
length(origphastCons7wayhg38CDS)
length(origphastCons100wayhg383UTR)
length(origphastCons7wayhg383UTR)
## Overlap between the two CDS files
hits_cds <- findOverlaps(origphastCons100wayhg38CDS, origphastCons7wayhg38CDS)
if (sum(queryHits(hits_cds)==subjectHits(hits_cds))!=length(hits_cds)){
origphastCons100wayhg38CDS <- origphastCons100wayhg38CDS[queryHits(hits_cds)]
origphastCons7wayhg38CDS <- origphastCons7wayhg38CDS[subjectHits(hits_cds)]
}
## Overlap between the two 3'UTR files
hits_3utr <- findOverlaps(origphastCons100wayhg383UTR, origphastCons7wayhg383UTR)
if (sum(queryHits(hits_3utr)==subjectHits(hits_3utr))!=length(hits_3utr)) {
origphastCons100wayhg383UTR <- origphastCons100wayhg383UTR[queryHits(hits_3utr)]
origphastCons7wayhg383UTR <- origphastCons7wayhg383UTR[subjectHits(hits_3utr)]
}
length(origphastCons100wayhg38CDS)
length(origphastCons7wayhg38CDS)
length(origphastCons100wayhg383UTR)
length(origphastCons7wayhg383UTR)
require(phastCons100way.UCSC.hg38)
biocLite("phastCons100way.UCSC.hg38")
biocLite("phastCons7way.UCSC.hg38")
require(phastCons100way.UCSC.hg38)
require(phastCons7way.UCSC.hg38)
gsco_w100_hg38 <- getGScores("phastCons100way.UCSC.hg38")
gsco_w7_hg38 <- getGScores("phastCons7way.UCSC.hg38")
pkgphastCons100wayhg38CDS <- scores(gsco_w100_hg38, origphastCons100wayhg38CDS)
pkgphastCons7wayhg38CDS <- scores(gsco_w7_hg38, origphastCons7wayhg38CDS)
pkgphastCons100wayhg383UTR <- scores(gsco_w100_hg38, origphastCons100wayhg383UTR)
pkgphastCons7wayhg383UTR <- scores(gsco_w7_hg38, origphastCons7wayhg383UTR)
gsco_w100_hg38
pkgphastCons100wayhg38CDS <- scores(gsco_w100_hg38, origphastCons100wayhg38CDS)
gsco
origpcsco3UTRs
origphastCons7wayhg383UTR
gsco_w7_hg38
scores(gsco_w100_hg38, origphastCons100wayhg38CDS)
scores()
args(scores)
help(scores)
origphastCons100wayhg38CDS
width(origphastCons100wayhg38CDS)
pkgpcsco3UTRs <- scores(gsco, origpcsco3UTRs)
gsco
origpcsco3UTRs
head(origphastCons100wayhg38CDS)
origpcsco3UTRs
tmp <- GRanges(seqnames(origpcsco3UTRs),
IRanges(IRanges(origpcsco3UTRs)),
strand="*")
IRanges(origpcsco3UTRs)
tmp <- GRanges(seqnames(origpcsco3UTRs),
IRanges(start=start(origpcsco3UTRs),
end=end(origpcsco3UTRs)),
strand="*")
pkgpcsco3UTRs <- scores(gsco, tmp)
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicScores")
library(GenomicScores)
rl <- Rle(c(1,1,0,0,0,0,0,0,0,0,3,3,3,3,3,2,2))
rl
as.numeric(rl)
require(phastCons100way.UCSC.hg19)
require(GenomicRanges)
gsco <- phastCons100way.UCSC.hg19
gsco
scores(gsco, GRanges(seqnames="chr7", IRanges(start=117232380, width=1)))

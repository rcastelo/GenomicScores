installed <- reactive(availableGScores(installed = TRUE)$Name)
toggleClass(class="red", selector = "input.apkgs",
condition = input$apkgs %in% installed())
output$text <- renderPrint(input$apkgs)
}
shinyApp(ui, server)
ui <- fluidPage(
useShinyjs(),
inlineCSS("#someId .selectize-dropdown-content > .option { color: red; }"),
inlineCSS("#someId .selectize-input { color: red; }"),
inlineCSS("#red {background: red;}"),
tags$div(id="someId",
selectInput("apkgs", "Select a package", choices = options)),
verbatimTextOutput("text")
)
server <- function(input, output, session) {
installed <- reactive(availableGScores(installed = TRUE)$Name)
addClass(class="red", selector = "input.apkgs")
output$text <- renderPrint(input$apkgs)
}
shinyApp(ui, server)
server <- function(input, output, session) {
installed <- reactive(availableGScores(installed = TRUE)$Name)
addClass(class="red", selector = "input.apkgs.options")
output$text <- renderPrint(input$apkgs)
}
shinyApp(ui, server)
print(source('Desktop/test.R')$value)
ui <- fluidPage(
useShinyjs(),
# inlineCSS("#someId .selectize-dropdown-content > .option { color: red; }"),
# inlineCSS("#someId .selectize-input { color: red; }"),
inlineCSS("#red {background: red;}"),
tags$div(id="someId",
selectInput("apkgs", "Select a package", choices = options)),
verbatimTextOutput("text")
)
server <- function(input, output, session) {
installed <- reactive(availableGScores(installed = TRUE)$Name)
observeEvent(input$apkgs,{
addClass(class="red", selector = "input.apkgs")
})
output$text <- renderPrint(input$apkgs)
}
shinyApp(ui, server)
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
names <- c("A", "B", "C")
installed <- c("TRUE", "FALSE", "FALSE")
options <- data.frame(names, installed)
options
ui <- fluidPage(
useShinyjs(),
# inlineCSS("#someId .selectize-dropdown-content > .option { color: red; }"),
# inlineCSS("#someId .selectize-input { color: red; }"),
inlineCSS(".red {color:red;}"),
inlineCSS(".green {color: green;}"),
selectInput("apkgs", "Select a package", choices = options),
)
server <- function(input, output, session) {
observe({
if(input$apkgs %in% installed) {
addClass(selector="input.apkgs.choices", class="green")
} else {
addClass(selector="input.apkgs.choices", class="red")
}
})
}
shinyApp(ui, server)
runApp('Desktop/test.R')
runApp('~/curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
x <- "A"
options[options$names==x]
options$names==x
options
options$names
options[options$names==x,]
options[options$names==x,]$installed
paste0("#algo .selectize-dropdown-content > .option[data-value=", x, "] { color: red; }")
paste0("#algo .selectize-dropdown-content > .option[data-value=\"", x, "\"] { color: red; }")
inlineCSS("#algo .selectize-dropdown-content > .option[data-value=\"A\"] { color: red; }")
ui <- fluidPage(
useShinyjs(),
# apply(names, function(x){
#   x <- "A"
#   if(options[options$names==x,]$installed) {
#     inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value=\"", x, "] { color: red; }"))
#   }
# }),
inlineCSS("#algo .selectize-dropdown-content > .option[data-value='A'] { color: red; }"),
div(id="algo",
selectInput("apkgs", "Select a package", choices = options$names)
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
runApp('Desktop/test.R')
ui <- fluidPage(
useShinyjs(),
apply(names, function(x){
if(options[options$names==x,]$installed) {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: red; }"))
} else {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: green; }"))
}
}),
# inlineCSS("#algo .selectize-dropdown-content > .option[data-value='A'] { color: red; }"),
div(id="algo",
selectInput("apkgs", "Select a package", choices = options$names)
)
)
ui <- fluidPage(
useShinyjs(),
uiOutput("test"),
# inlineCSS("#algo .selectize-dropdown-content > .option[data-value='A'] { color: red; }"),
div(id="algo",
selectInput("apkgs", "Select a package", choices = options$names)
)
)
server <- function(input, output, session) {
output$test <- renderUI({
apply(names, function(x){
if(options[options$names==x,]$installed) {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: red; }"))
} else {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: green; }"))
}
})
})
}
shinyApp(ui, server)
ui <- fluidPage(
useShinyjs(),
apply(names, options, function(x, options){
if(options[options$names==x,]$installed) {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: red; }"))
} else {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: green; }"))
}
}),
# inlineCSS("#algo .selectize-dropdown-content > .option[data-value='A'] { color: red; }"),
div(id="algo",
selectInput("apkgs", "Select a package", choices = options$names)
)
)
apply(names, function(x){
if(options[options$names==x,]$installed) {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: red; }"))
} else {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: green; }"))
}
})
if(options[options$names==x,]$installed) {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: red; }"))
} else {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: green; }"))
}
(options[options$names==x,]$installed)
if(options[options$names==x,]$installed)
if(options[options$names==x,]$installed) {
print("hola")
}
if(options[options$names==x,]$installed) {
print("hola")
}
options[options$names==x,]$installed
if(as.logical(options[options$names==x,]$installed)) {
print("hola")
}
(as.logical(options[options$names==x,]$installed))
names <- c("A", "B", "C")
installed <- c(TRUE, FALSE, FALSE)
options <- data.frame(names, installed)
ui <- fluidPage(
useShinyjs(),
apply(names, function(x){
if(options[options$names==x,]$installed) {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: red; }"))
} else {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: green; }"))
}
}),
# inlineCSS("#algo .selectize-dropdown-content > .option[data-value='A'] { color: red; }"),
div(id="algo",
selectInput("apkgs", "Select a package", choices = options$names)
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
names
apply(names, function(x){
print(x)
})
lapply(names, function(x){
print(x)
})
sapply(names, function(x){
print(x)
})
vapply(names, function(x){
print(x)
})
apply(names, function(x){
print(x)
})
str(names)
class(names)
apply(options$names, function(x){
print(x)
})
lapply(options$names, function(x){
print(x)
})
vapply(options$names, function(x){
print(x)
})
sapply(options$names, function(x){
print(x)
})
tapply(options$names, function(x){
print(x)
})
sapply(options$names, function(x){
print(x)
})
ui <- fluidPage(
useShinyjs(),
sapply(names, function(x){
if(options[options$names==x,]$installed) {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: red; }"))
} else {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: green; }"))
}
}),
# inlineCSS("#algo .selectize-dropdown-content > .option[data-value='A'] { color: red; }"),
div(id="algo",
selectInput("apkgs", "Select a package", choices = options$names)
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
useShinyjs(),
lapply(names, function(x){
if(options[options$names==x,]$installed) {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: red; }"))
} else {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: green; }"))
}
}),
# inlineCSS("#algo .selectize-dropdown-content > .option[data-value='A'] { color: red; }"),
div(id="algo",
selectInput("apkgs", "Select a package", choices = options$names)
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
options <- availableGScores()
options
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
lapply(options$Name, function(x){
if(options[options$Name==x,]$Installed) {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: red; }"))
} else {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: green; }"))
}
})
options <- availableGScores()
lapply(options$Name, function(x){
if(options[options$Name==x,]$Installed) {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: red; }"))
} else {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: green; }"))
}
})
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
options
options$Name
options[options$Name==x,]$Installed
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
shinyApp(ui, server)
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
library(shiny)
names <- c("A", "B", "C")
installed <- c("TRUE", "FALSE", "FALSE")
options <- data.frame(names, installed)
cssTemplate <- function(color){
sprintf(
".selectize-dropdown-content > .option,
.selectize-input > .item
{
color: %s;
}",
color
)
}
ui <- fluidPage(
tags$head(
uiOutput("css")
),
selectInput("apkgs", "Select a package", choices = options$names),
)
server <- function(input, output, session) {
output[["css"]] <- renderUI({
color <- ifelse(input$apkgs == "A", "green", "red")
tags$style(HTML(cssTemplate(color)))
})
}
shinyApp(ui, server)
ui <- fluidPage(
tags$head(
uiOutput("css")
),
selectInput("apkgs", "Select a package", choices = options$names),
)
server <- function(input, output, session) {
output$css <- renderUI({
color <- ifelse(input$apkgs == "A", "green", "red")
tags$style(HTML(cssTemplate(color)))
})
}
shinyApp(ui, server)
ui <- fluidPage(
useShinyjs(),
tags$head(
uiOutput("css")
),
div(id="algo",
selectInput("apkgs", "Select a package", choices = options$names)
)
)
server <- function(input, output, session) {
output$css <- renderUI({
tags$style(
HTML(
lapply(names, function(x){
if(options[options$names==x,]$installed) {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: red; }"))
} else {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: green; }"))
}
})
)
)
})
}
shinyApp(ui, server)
ui <- fluidPage(
useShinyjs(),
tags$head(
uiOutput("css")
),
div(id="algo",
selectInput("apkgs", "Select a package", choices = options$names)
)
)
server <- function(input, output, session) {
output$css <- renderUI({
tags$style(
HTML(
lapply(names, function(x){
if(options[options$names==x,]$installed) {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: red; }", x)
} else {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: green; }", x)
}
})
)
)
})
}
shinyApp(ui, server)
lapply(names, function(x){
if(options[options$names==x,]$installed) {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: red; }", x)
} else {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: green; }", x)
}
})
unlist(
lapply(names, function(x){
if(options[options$names==x,]$installed) {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: red; }", x)
} else {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: green; }", x)
}
}))
HTML(unlist(
lapply(names, function(x){
if(options[options$names==x,]$installed) {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: red; }", x)
} else {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: green; }", x)
}
}))
HTML(unlist(
lapply(names, function(x){
if(options[options$names==x,]$installed) {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: red; }", x)
} else {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: green; }", x)
}
}))
)
HTML(unlist(
lapply(names, function(x){
if(options[options$names==x,]$installed) {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: red; }", x)
} else {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: green; }", x)
}
}))
)
server <- function(input, output, session) {
output$css <- renderUI({
tags$style(
HTML(unlist(
lapply(names, function(x){
if(options[options$names==x,]$installed) {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: red; }", x)
} else {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: green; }", x)
}
}))
)
)
})
}
shinyApp(ui, server)
runApp('Desktop/test.R')
runApp('Desktop/test.R')
library(shiny)
names <- c("A", "B", "C")
installed <- c(TRUE, FALSE, FALSE)
options <- data.frame(names, installed)
ui <- fluidPage(
tags$head(
uiOutput("css")
),
div(id="algo",
selectInput("apkgs", "Select a package", choices = options$names)
)
)
server <- function(input, output, session) {
output$css <- renderUI({
tags$style(
HTML(unlist(
lapply(names, function(x){
if(options[options$names==x,]$installed) {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: green; }", x)
} else {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: red; }", x)
}
})
)
)
)
})
}
shinyApp(ui, server)
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
library(GenomicScores)
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
options <- availableGScores()
options
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
shiny::runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
library(GenomicScores)
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
install.packages("shinybusy")
library(shinybusy)
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
